<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.cityshop.cityshop_store">
    <!-- io.flutter.app.FlutterApplication is an android.app.Application that
         calls FlutterMain.startInitialization(this); in its onCreate method.
         In most cases you can leave this as-is, but you if you want to provide
         additional functionality it is fine to subclass or reimplement
         FlutterApplication and put your custom class here. -->  
     <!--第1处修改，重定向App启动入口类-->  
    <application
        android:name=".MainApplication" 
        android:label="用呗"
        android:icon="@mipmap/ic_launcher"
        android:usesCleartextTraffic="true">

        <activity
            android:name=".MainActivity"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <!-- Displays an Android View that continues showing the launch screen
                 Drawable until Flutter paints its first frame, then this splash
                 screen fades out. A splash screen is useful to avoid any visual
                 gap between the end of Android's launch screen and the painting of
                 Flutter's first frame. -->
            <meta-data
              android:name="io.flutter.embedding.android.SplashScreenDrawable"
              android:resource="@drawable/launch_background"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />  
        <!-- 第3处修改，添加友盟密钥-->
       <meta-data
            android:name="UMENG_APPKEY"
            android:value="61a07a2fe014255fcb8d33bc"/>
        <meta-data
            android:name="UMENG_CHANNEL"
            android:value="Umeng"/>

    </application>
    <!-- 第4处修改,安卓访问权限-->
    <!-- 获取访问网络连接-->
    <uses-permission android:name="android.permission.INTERNET"/>
    <!-- 获取网络信息状态,如当前的网络连接是否有效-->
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
    <!-- 获取当前WiFi接入的状态以及WLAN热点的信息-->
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
    <!--访问电话状态 -->
    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>
    <!-- 通过WiFi或移动基站的方式获取用户错略的经纬度信息,定位精度大概误差在30~1500米-->
    <!-- <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/> -->
    <!-- 改变WiFi多播状态-->
    <!-- <uses-permission android:name="android.permission.CHANGE_WIFI_MULTICAST_STATE"/> -->
    <!-- 允许程序写入外部存储,如SD卡上写文件-->
    <!-- <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/> -->
    <!-- 访问用户设备上的媒体文件(音乐)以进行播放-->
    <!-- <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/> -->
</manifest>
