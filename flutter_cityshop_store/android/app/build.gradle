def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesFile = rootProject.file("key.properties")
def jksProperFile = rootProject.file("cityshop_store.jks")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def enableSeparateBuildPerCPUArchitecture = true
def enableProguardInReleaseBuilds = true //开启混淆

android {
    //用于指定项目的编译版本,这里指定成30表示使用Android 11.0系统的SDK编译
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    /*@defaultConfig闭包中可以对项目的更多细节进行配置
    * @applicationId 用于指定项目的包名
    * @minSdkVersion 用于指定项目最低兼容的Android系统版本,这里指定成15表示最低兼容到Android 4.3系统
    * @targetSdkVersion 指定的值表示你在该目标版本上已经做过了充分的测试 
    * @clean  该任务继承自Delete,删除根目录中的build目录,targetSdkVersion指定成30,那么就说明你的程序最高只在Android 11.0系统   
    * @versionCode 用于指定项目的版本号
    * @versionName 用于指定项目的版本名
    */
    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.cityshop.cityshop_store"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName + "_"+new Date().format("yyyy-MM-dd HH:mm:ss") 
        //另外如果你的应用不需要支持国际化，那么可以设置 resConfigs 为 "zh","en"，即只支持中英文
        resConfigs "zh","en"

         ndk {
            // 设置支持的SO库架构 剔除多余的abi支持可以减少比较客观的apk大小
            //abiFilters 'armeabi' //打包关闭, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            abiFilters 'armeabi' , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a' //模拟器开启
        }
    }
    
    //flutter打包配置  https://blog.csdn.net/huanglei201502/article/details/88533134   
    /**
    * 制作秘钥的命令 keytool -genkey -alias com.cityshop -keyalg RSA -validity 3650 -keystore cityshop_store.jks
    * 创建了一个名为cityshop_store.jks的别名为com.cityshop的采用RSA加密算法的有效期为10年的证书文件
    * @genkey 生成文件
    * @alias 别名
    * @keyalg 加密算法
    * @validity 有效期
    * @keystore 文件名
    */
    //签名配置
    signingConfigs {
        release {
            storeFile file(jksProperFile)
            storePassword "cityshops"
            keyAlias "com.cityshop"
            keyPassword "cityshops"
        }
       
        debug {
            storeFile file(jksProperFile)
            storePassword "cityshops"
            keyAlias "com.cityshop"
            keyPassword "cityshops"
        }
    }

    //Android可以针对设备定制APK，即利用不同的资源文件编译出mdpi APK、hdpi APK等。这就是Apk Splits（APK分包）机制
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86-64"
        }
    }

    buildTypes {
       release {
            minifyEnabled enableProguardInReleaseBuilds //属性为 true，会告诉 proguard 删除所有未使用的方法和指令,进一步的减少 .dex 文件的大小。
            //proguard 配置,包括和proguard-android.txt 相同的ProGuard规则,但还包括其他在字节码一级（方法内和方法间）执行分析的优化，以进一步减小 APK 大小和帮助提高其运行速度。
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release//签名配置
            //设置 shrinkResources 属性为 true，这会在打包时删除未使用的资源
            shrinkResources true
        }

        debug {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.debug//签名配置
            shrinkResources true
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    buildToolsVersion = '30.0.2'
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
